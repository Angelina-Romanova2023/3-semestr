# lab 2
import numpy as np
from scipy.misc import derivative
from sympy import symbols, sin, cos, diff, integrate
from scipy.optimize import minimize
import numpy as sp
def f(x):
  return np.sin(2*x) / np.cos(x)
x0 = 2
p1=derivative(f, x0, 1, 1)
p2=derivative(f, x0, 1, 2)
print("1) Производные равны:",p1, p2)

print("2) Символьные производные равны:")
x = symbols('x')
f = sin(2*x) / cos(x)
dfdx = diff(f, x)
print(dfdx)
dfdx=diff(dfdx, x)
print(dfdx)

a=2
b=3
#f=lambda x: sin(2*x) / cos(x)
# Количество прямоугольников
n = 100
# Вычислите площадь каждого прямоугольника
width = (b - a) / n
areas = f(sp.linspace(a, b, n)) * width
# Суммируйте площади прямоугольников
integral = sp.sum(areas)
#result, error = quad(f, a, b)
print("3) Значение определенного интеграла:", integral)
x = symbols('x')
f = sin(2*x) / cos(x)
chet=integrate(f, x)
print("4) Символьное значение интеграла:", chet)

# Определение целевой функции
def objective_function(x):
  return (x[0]-3)**2 + (x[1]-8)**2
# Начальное значение решения
initial_guess = np.array([0, 0])
# Настройка ограничений
constraints = (
  {'type': 'eq', 'fun': lambda x: -2*x[0] + x[1] - 2},  # = 2
  {'type': 'ineq', 'fun': lambda x: 3*x[1] + 4*x[1] + 6}   # >= -6
)
# Выполнение оптимизации
result = minimize(objective_function, initial_guess, constraints=constraints)
print("5) Оптимальное значение:", result.fun)
print("   Оптимальное решение:", result.x)
