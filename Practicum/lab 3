import numpy as np
from scipy.stats import chisquare

def printm(matrix):
    return '\n'.join('  '.join(str(int(x)).lstrip('0') or '0' for x in row) for row in matrix)
def lu_decomposition(A):
  m, n = A.shape
  # Копируем исходную матрицу
  L = np.copy(A)
  U = np.zeros((n, n))
  # Матрица перестановок
  P = np.eye(m)
  # LU-разложение
  for j in range(n):
    # Находим максимальный элемент в j-м столбце
    max_element = np.max(np.abs(L[j:, j]))
    max_row = np.argmax(np.abs(L[j:, j])) + j
    # Перестановка строк, если необходимо
    if max_row != j:
      L[[j, max_row]] = L[[max_row, j]]
      P[[j, max_row]] = P[[max_row, j]]
    # Делим j-й столбец на L[j][j]
    L[j:, j] /= L[j, j]
    # Вычитаем кратные j-й строки из последующих строк
    for i in range(j + 1, m):
      U[i, j] = L[i, j]
      L[i, j:] -= U[i, j] * L[j, j:]
  return L, U, P

A = np.array([[1, -4, 2, 1.4],
              [2, -3.5, 9, 0],
              [7, 5, -4, 3],
              [1, 2, 3, 4]])
L, U, P = lu_decomposition(A)
print("\nНижняя треугольная матрица:")
print(printm(L))
print("\nВерхняя треугольная матрица:")
print(printm(U))
print("\nМатрица перестановок:")
print(printm(P))
print(np.allclose(P @ L @ U, A))

def determinant(A):
  # Вычисляем определители L и U
  det_L = np.prod(np.diagonal(L))
  det_U = np.prod(np.diagonal(U))
  # Вычисляем определитель P (1 или -1)
  det_P = np.linalg.det(P)
  # Возвращаем определитель матрицы A
  return det_L * det_U * det_P

det = determinant(A)
print("Определитель матрицы A:", det)

# Размер выборки
n = 100
# Равномерное распределение
sample_uniform = np.random.randint(1, 101, n)
# Нормальное распределение
sample_normal = np.random.normal(50, 10, n)
# Проверяем, что обе выборки имеют одинаковый размер
assert sample_uniform.size == sample_normal.size
# Выводим первые 10 элементов каждой выборки
print("Первые 10 элементов равномерной выборки:", sample_uniform[:10])
print("Первые 10 элементов нормальной выборки:", sample_normal[:10])

# a. Среднее
mean_uniform = np.mean(sample_uniform)
mean_normal = np.mean(sample_normal)
# b. Мода
mode_uniform = np.bincount(sample_uniform).argmax()
#mode_normal = np.bincount(sample_normal).argmax()!
# c. Медиана
median_uniform = np.median(sample_uniform)
median_normal = np.median(sample_normal)
# d. Минимум
min_uniform = np.min(sample_uniform)
min_normal = np.min(sample_normal)
# e. Максимум
max_uniform = np.max(sample_uniform)
max_normal = np.max(sample_normal)
# f. Стандартное отклонение
std_uniform = np.std(sample_uniform)
std_normal = np.std(sample_normal)
# Выводим результаты
print("Равномерная выборка:")
print("Среднее:", mean_uniform)
print("Мода:", mode_uniform)
print("Медиана:", median_uniform)
print("Минимум:", min_uniform)
print("Максимум:", max_uniform)
print("Стандартное отклонение:", std_uniform)
print("\nНормальная выборка:")
print("Среднее:", mean_normal)
#print("Мода:", mode_normal)
print("Медиана:", median_normal)
print("Минимум:", min_normal)
print("Максимум:", max_normal)
print("Стандартное отклонение:", std_normal)

# Вычисляем значение хи-квадрат и p-value
chi2, p = chisquare(sample_uniform)
chi21, p1 = chisquare(sample_normal)
print("Значение хи-квадрат:", chi2)
print("p-value:", p)
print("Значение хи-квадрат:", chi21)
print("p-value:", p1)
